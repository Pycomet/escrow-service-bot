# .github/workflows/deploy.yml
name: Build and Deploy to Cloud Run via GitHub Actions

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # This step configures the gcloud CLI within the GitHub Action runner.
      # It's a good precaution if any gcloud command (like run deploy)
      # might interact with Cloud Build APIs or be affected by project build settings.
      # The build itself here is a local 'docker build', not a 'gcloud builds submit'.
      - name: Configure Cloud Build logging for gcloud (client-side precaution)
        run: gcloud config set builds/logging CLOUD_LOGGING_ONLY --project=${{ secrets.GCP_PROJECT_ID }}
        continue-on-error: true # If SA lacks permission to set project-wide config (unlikely to be needed for client-side)

      # Authenticate Docker to push to your specific Artifact Registry host
      - name: Configure Docker to push to Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Build Docker image
        id: docker_build
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/escrow-service-bot:${{ github.sha }}"
          docker build -t "${IMAGE_NAME}" .
          echo "IMAGE_BUILT=${IMAGE_NAME}" >> $GITHUB_ENV
      
      - name: Push Docker image to Artifact Registry
        run: docker push "${{ env.IMAGE_BUILT }}"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy escrow-service-bot \
            --image "${{ env.IMAGE_BUILT }}" \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --project=${{ secrets.GCP_PROJECT_ID }}
            # Remember to add your necessary environment variables here if they aren't
            # already configured directly on your Cloud Run service in GCP.
            # For example:
            # --set-env-vars="TOKEN=${{ secrets.BOT_TOKEN }},DATABASE_URL=${{ secrets.DATABASE_URL }},WEBHOOK_URL=https://your-cloud-run-url/webhook"
