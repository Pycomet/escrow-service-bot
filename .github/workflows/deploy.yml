name: Deploy to Production

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/escrow-service-bot:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/escrow-service-bot:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy escrow-service-bot \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/escrow-service-bot:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="ADMIN_ID=${{ secrets.ADMIN_ID }}" \
          --set-env-vars="WEBHOOK_MODE=True" \
          --set-env-vars="WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}" \
          --set-env-vars="BTCPAY_URL=${{ secrets.BTCPAY_URL }}" \
          --set-env-vars="BTCPAY_STORE_ID=${{ secrets.BTCPAY_STORE_ID }}" \
          --set-env-vars="BTCPAY_SECRET=${{ secrets.BTCPAY_SECRET }}" \
          --set-env-vars="BTCPAY_API_KEY=${{ secrets.BTCPAY_API_KEY }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --memory 1Gi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 300

    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe escrow-service-bot --region=us-central1 --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        
        # Health check
        curl -f "$SERVICE_URL/health" || exit 1
        echo "‚úÖ Deployment verified successfully"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment
    needs: deploy
    if: always()
    
    steps:
    - name: Notify Telegram on success
      if: needs.deploy.result == 'success'
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.ADMIN_ID }}" \
          -d text="‚úÖ Escrow Service Bot deployed successfully to production! üöÄ%0A%0ACommit: ${{ github.sha }}%0ABranch: ${{ github.ref_name }}"

    - name: Notify Telegram on failure  
      if: needs.deploy.result == 'failure'
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.ADMIN_ID }}" \
          -d text="‚ùå Escrow Service Bot deployment FAILED! üö®%0A%0ACommit: ${{ github.sha }}%0ABranch: ${{ github.ref_name }}%0A%0APlease check the GitHub Actions logs."