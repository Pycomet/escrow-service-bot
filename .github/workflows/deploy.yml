# .github/workflows/deploy.yml
name: Trigger Cloud Build

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  trigger-cloud-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Create service account key file from secret
      - name: Set up GCP service account key
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-sa-key.json
          echo "Service account key file created at /tmp/gcp-sa-key.json"

      # Authenticate directly with gcloud using the key file
      - name: Authenticate with gcloud
        run: |
          gcloud auth activate-service-account --key-file=/tmp/gcp-sa-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          
          # Verify gcloud is authenticated successfully
          echo "Active gcloud account:"
          gcloud auth list --filter=status:ACTIVE --format="value(account)"
          
          # Verify project is set correctly
          echo "Active project:"
          gcloud config get-value project

      # Submit build to Cloud Build 
      - name: Submit to Cloud Build
        run: |
          # Get the current commit SHA
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Triggering Cloud Build for commit: ${COMMIT_SHA}"
          
          # Submit the build to Cloud Build
          gcloud builds submit --config=cloudbuild.yaml \
            --substitutions=COMMIT_SHA=${COMMIT_SHA} \
            --project=${{ secrets.GCP_PROJECT_ID }}
            
          echo "✅ Cloud Build triggered successfully!"
            
      # Clean up service account key
      - name: Clean up service account key
        if: always() # Run even if previous steps fail
        run: |
          rm -f /tmp/gcp-sa-key.json
          echo "Service account key file removed"

      # Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/escrow-service-bot:${{ github.sha }}"
          echo "Building Docker image: ${IMAGE_NAME}"
          docker build -t "${IMAGE_NAME}" .
          echo "IMAGE_BUILT=${IMAGE_NAME}" >> $GITHUB_ENV

      # Push Docker image to Artifact Registry
      - name: Push Docker image to Artifact Registry
        run: |
          echo "Pushing image: ${{ env.IMAGE_BUILT }}"
          docker push "${{ env.IMAGE_BUILT }}"
          
      # Verify image is accessible before deploying
      - name: Verify image is accessible
        run: |
          echo "Verifying image is accessible in Artifact Registry..."
          
          # Wait for up to 60 seconds for the image to be accessible
          max_attempts=12
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            
            if gcloud artifacts docker images describe "${{ env.IMAGE_BUILT }}" --project=${{ secrets.GCP_PROJECT_ID }} --quiet; then
              echo "✅ Image is accessible and ready for deployment!"
              break
            else
              echo "Image not yet accessible, waiting 5 seconds..."
              sleep 5
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Timed out waiting for image to be accessible"
            exit 1
          fi

      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          echo "Deploying image to Cloud Run: ${{ env.IMAGE_BUILT }}"
          
          # Retry deployment up to 3 times
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Deployment attempt $attempt of $max_attempts..."
            
            if gcloud run deploy escrow-service-bot \
              --image "${{ env.IMAGE_BUILT }}" \
              --region us-central1 \
              --platform managed \
              --allow-unauthenticated \
              --project=${{ secrets.GCP_PROJECT_ID }} \
              --timeout=600s \
              --cpu=1 \
              --memory=512Mi \
              --cpu-boost \
              --no-traffic; then
              
              echo "✅ Deployment succeeded!"
              
              # Now migrate traffic to the new revision
              echo "Migrating traffic to new revision..."
              gcloud run services update-traffic escrow-service-bot \
                --region us-central1 \
                --project=${{ secrets.GCP_PROJECT_ID }} \
                --to-latest
              
              break
            else
              echo "Deployment failed, waiting 15 seconds before retry..."
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ All deployment attempts failed"
            exit 1
          fi
