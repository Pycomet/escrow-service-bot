name: Run Tests

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment variables
      env:
        TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'test-token-12345' }}
        DATABASE_URL: mongodb://localhost:27017
        DATABASE_NAME: testbot
        ADMIN_ID: 123456789
        DEBUG: true
        TESTING: true
        GEMINI_API_KEY: test-key
        BTCPAY_URL: https://test.btcpay.com
        BTCPAY_STORE_ID: test-store
        BTCPAY_SECRET: test-secret
        BTCPAY_API_KEY: test-api-key
      run: |
        # Create .env file for testing
        echo "TOKEN=${TOKEN}" > .env
        echo "DATABASE_URL=${DATABASE_URL}" >> .env
        echo "DATABASE_NAME=${DATABASE_NAME}" >> .env
        echo "ADMIN_ID=${ADMIN_ID}" >> .env
        echo "DEBUG=${DEBUG}" >> .env
        echo "TESTING=${TESTING}" >> .env
        echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> .env
        echo "BTCPAY_URL=${BTCPAY_URL}" >> .env
        echo "BTCPAY_STORE_ID=${BTCPAY_STORE_ID}" >> .env
        echo "BTCPAY_SECRET=${BTCPAY_SECRET}" >> .env
        echo "BTCPAY_API_KEY=${BTCPAY_API_KEY}" >> .env

    - name: Wait for MongoDB to be ready
      run: |
        timeout 30s bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'

    - name: Run tests
      run: |
        make test

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          .pytest_cache/
          *.log
        retention-days: 30

    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ **Tests Failed**\n\nPlease check the test results in the Actions tab and fix any failing tests before merging.'
          });

    - name: Comment PR with success
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ **All Tests Passed**\n\nGreat job! All tests are passing and the code is ready for review.'
          });
