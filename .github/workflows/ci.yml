name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONUNBUFFERED: 1

jobs:
  # Core Testing - Runs on all events
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        include:
          - python-version: "3.11"
            coverage: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install-dev

    - name: Run code formatting check
      run: |
        make format
        git diff --exit-code || (echo "Code formatting check failed. Run 'make format' locally and commit changes." && exit 1)

    - name: Run linting
      run: |
        make lint

    - name: Run test suite
      run: |
        make test

    - name: Run tests with coverage (Python 3.11 only)
      if: matrix.coverage
      run: |
        make test-coverage

    - name: Upload coverage to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./htmlcov/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      if: matrix.coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  # Docker Build Test - Runs on all events
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t escrow-service-bot:test .

    - name: Test Docker image
      run: |
        docker run --rm escrow-service-bot:test python -c "import sys; print('Python version:', sys.version)"

  # Security Checks - Runs on all events
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install-dev

    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Integration Tests - Only on main branch pushes
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install-dev

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=mongodb://localhost:27017" >> $GITHUB_ENV
        echo "DATABASE_NAME=escrowbot_test" >> $GITHUB_ENV
        echo "TOKEN=test_token" >> $GITHUB_ENV
        echo "ADMIN_ID=123456789" >> $GITHUB_ENV

    - name: Wait for MongoDB
      run: |
        timeout 60 bash -c 'until mongosh --eval "db.runCommand(\"ping\").ok" > /dev/null 2>&1; do sleep 2; done'

    - name: Run integration tests
      run: |
        make test-integration

  # Performance Tests - Only on main branch pushes
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install-dev

    - name: Run performance tests (if they exist)
      run: |
        if [ -d "tests/performance" ]; then
          pytest tests/performance/ -v
        else
          echo "No performance tests found, skipping..."
        fi

  # Documentation Check - Runs on all events
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README formatting
      run: |
        if command -v markdownlint >/dev/null 2>&1; then
          markdownlint README.md
        else
          echo "markdownlint not available, skipping README check"
        fi

    - name: Check for broken links in README
      run: |
        if command -v markdown-link-check >/dev/null 2>&1; then
          markdown-link-check README.md
        else
          echo "markdown-link-check not available, skipping link check"
        fi

  # Final Status Check - Runs on all events
  status:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, security, docker, integration, performance, docs]
    if: always()

    steps:
    - name: Check job status
      run: |
        echo "All jobs completed!"
        echo "Test job status: ${{ needs.test.result }}"
        echo "Security job status: ${{ needs.security.result }}"
        echo "Docker job status: ${{ needs.docker.result }}"
        echo "Integration job status: ${{ needs.integration.result }}"
        echo "Performance job status: ${{ needs.performance.result }}"
        echo "Docs job status: ${{ needs.docs.result }}"
        
        # Fail if any required jobs failed
        if [[ "${{ needs.test.result }}" == "failure" ]] || [[ "${{ needs.security.result }}" == "failure" ]] || [[ "${{ needs.docker.result }}" == "failure" ]]; then
          echo "Critical jobs failed. Build cannot proceed."
          exit 1
        fi
        
        echo "All critical jobs passed successfully!" 