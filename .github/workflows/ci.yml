name: Continuous Integration

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety

    - name: Check code formatting with Black
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true

    - name: Security check with bandit
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        bandit -r . -x tests/ || true
      continue-on-error: true

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: lint-and-format
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Set up test environment
      env:
        TOKEN: test-token-12345
        DATABASE_URL: mongodb://localhost:27017
        DATABASE_NAME: testbot_${{ matrix.python-version }}
        ADMIN_ID: 123456789
        DEBUG: true
        TESTING: true
        GEMINI_API_KEY: test-key
        BTCPAY_URL: https://test.btcpay.com
        BTCPAY_STORE_ID: test-store
        BTCPAY_SECRET: test-secret
        BTCPAY_API_KEY: test-api-key
      run: |
        echo "TOKEN=${TOKEN}" > .env
        echo "DATABASE_URL=${DATABASE_URL}" >> .env
        echo "DATABASE_NAME=${DATABASE_NAME}" >> .env
        echo "ADMIN_ID=${ADMIN_ID}" >> .env
        echo "DEBUG=${DEBUG}" >> .env
        echo "TESTING=${TESTING}" >> .env
        echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> .env
        echo "BTCPAY_URL=${BTCPAY_URL}" >> .env
        echo "BTCPAY_STORE_ID=${BTCPAY_STORE_ID}" >> .env
        echo "BTCPAY_SECRET=${BTCPAY_SECRET}" >> .env
        echo "BTCPAY_API_KEY=${BTCPAY_API_KEY}" >> .env

    - name: Wait for MongoDB
      run: |
        timeout 30s bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      if: matrix.python-version == '3.10'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  build-check:
    runs-on: ubuntu-latest
    name: Build Check
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check if project builds
      run: |
        python -c "import main; print('✅ Main module imports successfully')"

    - name: Validate configuration
      run: |
        python -c "
        import os
        os.environ['TOKEN'] = 'test-token'
        os.environ['DATABASE_URL'] = 'mongodb://test:27017'
        os.environ['ADMIN_ID'] = '123456789'
        import config
        print('✅ Configuration loads successfully')
        "

  pr-summary:
    runs-on: ubuntu-latest
    name: PR Summary
    needs: [lint-and-format, test, build-check]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR with results
      uses: actions/github-script@v6
      with:
        script: |
          const { data: checkRuns } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
          });
          
          const conclusion = checkRuns.check_runs.every(run => 
            run.conclusion === 'success' || run.conclusion === 'neutral'
          ) ? 'success' : 'failure';
          
          const emoji = conclusion === 'success' ? '✅' : '❌';
          const status = conclusion === 'success' ? 'All checks passed!' : 'Some checks failed!';
          
          const body = `${emoji} **CI Results**
          
          ${status}
          
          **Checks completed:**
          - Code Quality & Linting
          - Tests (Python 3.10 & 3.11)  
          - Build Verification
          
          ${conclusion === 'failure' ? 'Please review the failed checks and fix any issues.' : 'Great work! Your code is ready for review.'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });