from config import *
from utils import *
from functions import *
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler

RULES_TEXT = """
üìú <b>Escrow Service Rules</b>

1Ô∏è‚É£ <b>General Rules</b>
‚Ä¢ All trades must be conducted through the bot
‚Ä¢ Be respectful to other users
‚Ä¢ No fraudulent activities
‚Ä¢ Keep communication clear and professional

2Ô∏è‚É£ <b>Trade Rules</b>
‚Ä¢ Verify trade details before confirming
‚Ä¢ Only join trades you can complete
‚Ä¢ Follow payment instructions carefully
‚Ä¢ Report any issues immediately

3Ô∏è‚É£ <b>Payment Rules</b>
‚Ä¢ Use only supported payment methods
‚Ä¢ Never share payment details in chat
‚Ä¢ Wait for confirmation before releasing funds
‚Ä¢ Keep payment receipts

4Ô∏è‚É£ <b>Dispute Resolution</b>
‚Ä¢ Report disputes within 24 hours
‚Ä¢ Provide evidence when requested
‚Ä¢ Follow moderator instructions
‚Ä¢ Accept final decisions

5Ô∏è‚É£ <b>Security</b>
‚Ä¢ Never share your private keys
‚Ä¢ Use secure payment methods
‚Ä¢ Report suspicious activity
‚Ä¢ Enable 2FA when available

‚ùóÔ∏è Violation of these rules may result in account suspension.
"""

async def rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /rules command"""
    try:
        # Check if this is from a callback query or direct command
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                RULES_TEXT,
                parse_mode="html",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to Menu", callback_data="menu")
                ]])
            )
        else:
            await update.message.reply_text(
                RULES_TEXT,
                parse_mode="html",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to Menu", callback_data="menu")
                ]])
            )
    except Exception as e:
        logger.error(f"Error in rules handler: {e}")
        # Determine which message object to use
        message = update.callback_query.message if update.callback_query else update.message
        if message:
            await message.reply_text(
                "‚ùå An error occurred while displaying the rules. Please try again later.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to Menu", callback_data="menu")
                ]])
            )


async def community_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /community command"""
    try:
        community_text = """
üåê <b>Join Our Community</b>

Stay connected with our growing community:

üì¢ <b>Official Channels</b>
‚Ä¢ Announcements: @escrow_announcements
‚Ä¢ Support Group: @escrow_support
‚Ä¢ Trading Group: @escrow_trading

ü§ù <b>Community Guidelines</b>
‚Ä¢ Be respectful to others
‚Ä¢ No spam or advertising
‚Ä¢ Keep discussions relevant
‚Ä¢ Follow moderator instructions

Join us to:
‚Ä¢ Get trading tips
‚Ä¢ Find trading partners
‚Ä¢ Stay updated on features
‚Ä¢ Get community support
"""
        # Check if this is from a callback query or direct command
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                community_text,
                parse_mode="html",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to Menu", callback_data="menu")
                ]])
            )
        else:
            await update.message.reply_text(
                community_text,
                parse_mode="html",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to Menu", callback_data="menu")
                ]])
            )
    except Exception as e:
        logger.error(f"Error in community handler: {e}")
        # Determine which message object to use
        message = update.callback_query.message if update.callback_query else update.message
        if message:
            await message.reply_text(
                "‚ùå An error occurred while displaying community information. Please try again later.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to Menu", callback_data="menu")
                ]])
            )


def register_handlers(application):
    """Register handlers for the rules module"""
    application.add_handler(CommandHandler("rules", rules_handler))
    application.add_handler(CommandHandler("community", community_handler))
