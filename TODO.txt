0) Foundations (Week 0)
- Freeze current master branch; create hardening branch.
□ Introduce pre-commit hooks (ruff/black, mypy strict).
□ Configure GitHub Actions → run tests & lint on every PR.

1) Security & secrets (Week 1)
□ Generate a one-time WALLET_ENCRYPTION_KEY, store in Secret Manager/Env.
□ Audit logs, replace print() with logger.*; scrub private material.
□ Add Pydantic settings class to centralise env vars & perform sanity checks at boot.

2) Wallet & payment engine (Week 2-3)
□ Finish ETH/USDT transfer helpers (WalletManager.send_*, gas estimation, nonce handling).
□ Add blockchain listener (Infura websockets or Alchemy notify) that:
Watches receiving_address → on first confirmation triggers TradeClient.confirm_crypto_deposit.
□ Implement release logic: when both is_crypto_deposited and is_fiat_paid are true, allow seller to tap “Release escrow”, calling send_crypto to buyer’s address.
□ Handle refund path on trade cancel / dispute lost.
□ Add balance-safety checks: ensure escrow wallet keeps min ETH for gas.

3) Trade life-cycle state machine (Week 3)
□ Introduce explicit enum field status: pending_deposit | deposited | buyer_joined | fiat_paid | released | disputed | cancelled.
□ Migrate handlers to mutate state via single TradeService class instead of ad-hoc DB updates.
□ Emit Telegram updates to both parties on every transition.

4) Dispute module (Week 4)
□ Implement functions.dispute.py with schema:
dispute_id, trade_id, raised_by, reason, evidence, status, admin_decision.
□ User command /report to raise dispute → notify admin group.
□ Admin UI: accept/decline, choose winner, auto-release funds accordingly.

5) Robust logging & observability (Week 4)
□ Switch to log-structured JSON (python-json-logger) for GCP.
□ Add trace IDs per trade for correlation.
□ Export Prometheus metrics (#trades_open, #disputes, wallet balance etc.).

6) Test suite & CI/CD (Week 5)
□ Add pytest fixtures: mock Telegram, mock web3 provider, stub BTCPay.
□ Integration test: create trade → deposit event → join → release.
□ Mutation tests for wallet encryption/decryption.
□ Add load test script (Locust/k6) for webhook endpoint.

7) Documentation & ops (Week 6)
□ Update README with new env vars, flow diagrams.
□ Add run-book for support, dispute handling, key rotation.
□ Harden Dockerfile: multi-stage, non-root user, size ≤ 250 MB.
□ Enable Cloud-Run min-instances = 1 (keeps encryption key active) and Cloud Scheduler health pings.

8) Launch checklist
□ Pen-test wallet endpoints; run static-analysis (bandit).
□ Dry-run trade with small sums on testnet & BTCPay test store.
□ Confirm backup of Mongo & secret keys.
□ Prepare customer support SOP.